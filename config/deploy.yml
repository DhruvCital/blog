# Name of your application. Used to uniquely configure containers.
service: blog

# Name of the container image.
image: dhruvcital/blog

builder:
  remote:
    arch: amd64

# Deploy to these servers.
servers:
  web:
    hosts:
      - 15.206.227.14
    # labels:
    #   traefik.http.routers.myapp.rule: Host(`example.com`,`www.example.com`)
    #   traefik.http.routers.myapp_secure.entrypoints: websecure
    #   traefik.http.routers.myapp_secure.rule: Host(`example.com`,`www.example.com`)
    #   traefik.http.routers.myapp_secure.tls: true
    #   traefik.http.routers.myapp_secure.tls.certresolver: letsencrypt

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: dhruvcital

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  secret:
    - RAILS_MASTER_KEY

# Use a different ssh user than root
ssh:
  user: ubuntu

# traefik:
#   options:
#     publish:
#       - "443:443"
#     volume:
#     - "/letsencrypt/acme.json:/letsencrypt/acme.json"
#   args:
#     entryPoints.web.address: ":80"
#     entryPoints.websecure.address: ":443"
#     certificatesResolvers.letsencrypt.acme.email: "my_email@example.com"
#     certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
#     certificatesResolvers.letsencrypt.acme.httpchallenge: true
#     certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

volumes:
  - "storage:/rails/storage"
